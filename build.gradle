// create a runnable jar with jar dependencies stored in lib subdirectory
tasks.whenTaskAdded { task ->
    ['startScripts', 'distTar'].each { String skipTaskName ->
        if (task.name.contains(skipTaskName)) {
            task.enabled = false
        }
    }
}
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "edu.mcw.rgd.indexer.Manager"
applicationDefaultJvmArgs = ["-Dgreeting.language=en"]

String myAppName="ESIndexer"

project.archivesBaseName = myAppName

repositories {
    mavenCentral()
}

// https://mvnrepository.com/
dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.11'
    implementation fileTree(dir: 'lib', include: '*.jar')

    implementation 'org.elasticsearch:elasticsearch:7.4.0'
    implementation 'org.elasticsearch.client:transport:7.4.0'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client:7.4.0'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.4.0'
    implementation 'org.apache.lucene:lucene-core:8.2.0'

    implementation 'commons-dbcp:commons-dbcp:1.4'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    implementation 'org.jsoup:jsoup:1.8.3'
    implementation 'com.google.code.gson:gson:2.9.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1' // it was 2.9.7
    implementation 'com.oracle.database.jdbc:ojdbc8:21.7.0.0'
    implementation 'org.springframework:spring-beans:5.3.17'
    implementation 'org.springframework:spring-jdbc:5.3.17'
}

jar {
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
}

distributions {
    main {
        baseName = myAppName
        //distributionBaseName = myAppName
    }
}

task createDistro(type: Copy) {
    def zipFile = file('build/distributions/'+myAppName+'.zip')
    def outputDir = file("build/install")

    from zipTree(zipFile)
    into outputDir
}
createDistro.dependsOn assembleDist

task update_rgdcore(type:Copy){
    from file("../../rgd-core-library/dist/rgdcore_1.1.3.jar")
    into file("lib/")
}
